{# template de l'objet ODTreeview#}

{% macro makeJson(feuille) %}
    {% set json = '' %}
    {% for feuille in feuilles %}
        {% set json = json ~ ' { ' %}
        {%  set state = '' %}
        {%  for key, item in feuille %}
            {% switch key %}
                {% case 'node' %}
                    {% set json = json ~ _self.makeJson(item) %}
                    {% set json = json ~ ']' %}
                {% case 'enable' %}
                    {% if item == false %}
                        {% set json = json ~ '"selectable": false , "color": "#888888", "backColor": "#EEEEEE",' %}
                    {% endif %}
                {% case 'check' %}
                    {% if state is empty %}
                        {% set state = '"state": { ' %}
                    {% endif %}
                    {% if item == true %}
                        {% set state = state ~ ' "' ~ key ~ 'ed": true,' %}
                    {% else %}
                        {% set state = state ~ ' "' ~ key ~ 'ed": false,' %}
                    {% endif %}
                {% case 'select' %}
                {% default %}
                    {% set json = json ~ '"' ~ key ~ '" : "' ~ item ~ '" ,' %}
            {% endswitch %}
        {% endfor %}
        {% if state is not empty %}
            {% if substr(state, state|length - 1) == ',' %}
                {% set state = substr(state, 0, state|length - 1 ) ~ ' } ,' %}
            {% else %}
            {% if substr(json, json|length - 1) == ',' %}
                {% set json = json ~ state %}
            {% else %}
                {% set json = json ~ ', ' ~ state %}
            {% endif %}
        {% endif %}
        {% if substr(json, json|length - 1) == ',' %}
            {% set json = substr(json, 0, json|length - 1 ) %}
        {% endif %}
        {% set json = json ~ ' } ,' %}
    {% endfor %}
    {% if substr(json, json|length - 1) == ',' %}
        {% set json = substr(json, 0, json|length - 1 ) %}
    {% endif %}
    {{ json }}
{% endmacro makeJson %}

{# traitement de l'objet tree pour cr√©ation d'un objet json pour alimentation du plugin treeview #}
{% set tree = objet.tree %}
{% if tree is empty %}
    {% set tree = {} %}
{% endif %}

{% set jsonTree = '[' ~ _self.makeJson(tree) ~ ']' %}

<div id="{{ objet.id }}" objetGUI data-gui-object="1" class="smart-form" >

    <style>
        .treeview {
            font-weight: 400;
            font-size: 13px;
            color: #333;
            height: 240px !important;
            background: #FFFFFF;
            border: 1px solid #DDDDDD;;
            overflow-y: auto;
        }
    </style>

    <label class="label">{{ objet.label }}</label>

    {% if objet.search is not empty %}
        {% if objet.searchLabel is not empty %}
            <label for="{{ objet.id }}Search" class="sr-only">{{ objet.searchLabel}}</label>
        {% endif %}
        <input type="input" class="form-control" id="{{ objet.id }}Search" placeholder="{{ objet.searchPlaceholder}}" value="">
        <p>&nbsp;</p>
    {% endif %}
    <label class="input">
        <div id="{{ objet.id }}Tree" class="treeview"></div>
    </label>
</div>

<script>
    jQuery( document ).ready(function( $ ) {

        $.objectLength = function (a) {
            return $.map(a, function (n, i) {
                return i;
            }).length;
        };

        function cocheEnfants(children, checked)
        {
            for (var i=0; i < children.length; i++) {
                $('#{{ objet.id }}Tree').treeview( 'checkNode', [children[i].nodeId, { silent: true } ]);
                var elt = {'nodeId': children[i].nodeId, 'label': children[i].text, 'val': children[i].value, 'parentId':children[i].parentId};
                var find = false;
                if (checked.length > 0) {
                    for (var j=0; j < checked.length; j++) {
                        var checktab = checked[j];
                        if (elt.nodeId == checktab.nodeId) {
                            checked[j] = elt;
                            var find = true;
                        }
                    }
                }
                if (find == false) checked[checked.length] = elt;
                if (typeof children[i].nodes != "undefined") {
                    var checked = cocheEnfants(children[i].nodes, checked);
                }
            }
            return checked;
        }

        function cocheParents(node, checked)
        {
            $('#{{ objet.id }}Tree').treeview( 'checkNode', [node.nodeId, { silent: true } ]);
            var elt = {'nodeId': node.nodeId, 'label': node.text, 'val': node.value, 'parentId':node.parentId};
            var find = false;
            if (checked.length > 0) {
                for (var j=0; j < checked.length; j++) {
                    var checktab = checked[j];
                    if (node.nodeId == checktab.nodeId) {
                        checked[j] = elt;
                        var find = true;
                        break;
                    }
                }
            }
            if (find == false) {
                checked[checked.length] = elt;
                if (typeof node.parentId != "undefined") {
                    var parentNode = $('#{{ objet.id }}Tree').treeview('getParent', node);
                    var checked = cocheParents(parentNode, checked);
                }
            }
            return checked;
        }

        function decocheEnfants(children, checked) {
            if (checked.length > 0) {
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    var find = false;
                    for (j=0; j < checked.length; j++) {
                        var checkElt = checked[j];
                        if (child.nodeId == checkElt.nodeId) {
                            var find = true;
                            var ind  = j;
                            break;
                        }
                    }
                    if (find != false) {
                        checked.splice(ind, 1);
                        $('#{{ objet.id }}Tree').treeview( 'uncheckNode', [child.nodeId, { silent: true } ]);
                        // child as children ?
                        if (typeof child.nodes != "undefined") {
                            var checked = decocheEnfants(child.nodes, checked)
                        }
                    }
                }
            }
            return checked;
        }

        function decocheParents(node, checked) {
            if (checked.length > 0) {
                var children = node.nodes;
                var decocher = true;
                for (var i=0; i < children.length; i++) {
                    var child = children[i];
                    for (var j=0; j < checked.length; j++) {
                        var checktab = checked[j];
                        if (child.nodeId == checktab.nodeId) {
                            var decocher = false;
                            break;
                        }
                    }
                    if (decocher == false) break;
                }

                if (decocher == true) {
                    $('#{{ objet.id }}Tree').treeview( 'uncheckNode', [node, { silent: true } ]);
                    var find = false;
                    for (var j=0; j < checked.length; j++) {
                        var checktab = checked[j];
                        if (node.nodeId == checktab.nodeId) {
                            checked.splice(j, 1);
                            var find = true;
                            break;
                        }
                    }
                    if (find == true) {
                        // propagation aux parents
                        if (typeof node.parentId != "undefined") {
                            var parentNode = $('#{{ objet.id }}Tree').treeview('getParent', node);
                            var checked = decocheParents(parentNode, checked);
                        }
                    }
                }
            }
            return checked;
        }

        var json = '{{ jsonTree }}';
        var tree = $('#{{ objet.id }}Tree').treeview({
        {% if objet.multiple == false %}
            multiSelect: false,
        {% else %}
            multiSelect: true,
        {% endif %}
        {% if objet.checkbox == true %}
            showCheckbox: true,
        {% else %}
            showCheckbox: false,
        {% endif %}
            data: json,
            levels: 4,
            searchResultColor: '#0FBF47'
        });

        var findExpandibleNodess = function() {
            return tree.treeview('search', [ $('#{{ objet.id }}Search').val(), { ignoreCase: true, exactMatch: false } ]);
        };
        var expandibleNodes = findExpandibleNodess();

        $('#{{ objet.id }}Tree').on('nodeChecked', function(even, node) {
            var check = {'nodeId' : node.nodeId, 'label': node.text, 'val': node.value, 'parentId': node.parentId};
            var checked = $('#{{ objet.id }}').data('checked');
            if (typeof checked === "undefined") checked = [];
            var find = false;
            if (checked.length > 0) {
                for (var i=0; i < checked.length; i++) {
                    var checktab = checked[i];
                    if (check.nodeId == checktab.nodeId) {
                        checked[i] = check;
                        var find = true;
                    }
                }
            }
            if (find == false) {
                checked[checked.length] = check;

                // propagation aux enfants
                if (typeof node.nodes != "undefined") {
                    var checked = cocheEnfants(node.nodes, checked)
                }

                // propagation aux parents
                if (typeof node.parentId != "undefined") {
                    var parentNode = $('#{{ objet.id }}Tree').treeview('getParent', node);
                    var checked = cocheParents(parentNode, checked);
                }
            }

            $('#{{ objet.id }}').data('checked', checked);
        });

        $('#{{ objet.id }}Tree').on('nodeUnchecked', function(even, node) {
            // d√©coche le noeud choisi
            var checked = $('#{{ objet.id }}').data('checked');

            var find = false;
            if (checked.length > 0) {
                $('#{{ objet.id }}Tree').treeview( 'uncheckNode', [node, { silent: true } ]);
                for (var i=0; i < checked.length; i++) {
                    var checktab = checked[i];
                    if (node.nodeId == checktab.nodeId) {
                        checked.splice(i, 1);
                        var find = true;
                        break;
                    }
                }
            }
            if (find == true) {
                // propagation aux enfants
                if (typeof node.nodes != "undefined") {
                    var checked = decocheEnfants(node.nodes, checked)
                }
                // propagation aux parents
                if (node.parentId != "undefined") {
                    var parent = $('#{{ objet.id }}Tree').treeview('getParent', node);
                    var checked = decocheParents(parent, checked);
                }
                $('#{{ objet.id }}').data('checked', checked);
            }
        });

        $('#{{ objet.id }}Tree').on('nodeSelected', function(even, node) {
            var select = {'nodeId' : node.nodeId, 'label': node.text, 'val': node.value};
            var selected = $('#{{ objet.id }}').data('selected');
            if (typeof selected === "undefined") selected = [];
            var find = false;
            if (selected.length > 0) {
                for (var i=0; i < selected.length; i++) {
                    var selecttab = selected[i];
                    if (select.nodeId == selecttab.nodeId) {
                        selected[i] = select;
                        var find = true;
                    }
                }
            }
            if (find == false) selected[selected.length] = select;

            $('#{{ objet.id }}').data('selected', selected);
            {# appel evtClick#}
        });

        $('#{{ objet.id }}Tree').on('nodeUnselected', function(even, node) {
            var selected = $('#{{ objet.id }}').data('selected');
            if (typeof selected === "undefined") selected = [];
            var find = false;
            if (selected.length > 0) {
                for (var i=0; i < selected.length; i++) {
                    var selecttab = selected[i];
                    if (node.nodeId == selecttab.nodeId) {
                        selected.splice(i, 1);
                        var find = true;
                    }
                }
            }
            if (find == true) {
                $('#{{ objet.id }}').data('selected', selected);
            }
            {# appel evtClick#}
        });

        $('#{{ objet.id }}Search').on('keyup', function (e) {
            $('#{{ objet.id }}Tree').treeview('collapseAll');
            expandibleNodes = findExpandibleNodess();
//        var search = $('#{{ objet.id }}Search').val();
//        if (search == "") {
//            $('#{{ objet.id }}Tree ul li').css('display','block');
//        } else {
//            $('#{{ objet.id }}Tree ul li:not(.search-result)').css('display','none');
//        }
        });

        var checkNode = [];
        var checkNodes = $('#{{ objet.id }}Tree').treeview('getChecked');
        if (checkNodes.length > 0) {
            $.each(checkNodes, function(index, obj){
                var elt = { 'nodeId' : obj.nodeId, 'label' : obj.text, 'val' : obj.value }
                checkNode[checkNode.length] = elt;
            });
            $('#{{ objet.id }}').data('checked', checkNode);
        }
    });
</script>


{#
if (find == true) {
// propagation aux enfants
if (typeof node.nodes != "undefined") {
var checked = decocheEnfants(node.nodes, checked)
}

// propagation aux parents
if (typeof node.parentId != "undefined") {
var parentNode = $('#{{ objet.id }}Tree').treeview('getParent', node);
var checked = decocheParents(parentNode, checked);
}

$('#{{ objet.id }}').data('checked', checked);
}
#}
